HTTP请求处理流程
1、加载配置
Django的配置都在“Project/settings.py”中定义，可以是Django的配置，也可以是自定义的配置，并且通过django.conf.settings访问。

2、启动
最核心动作是通过django.core.management.commands.runfcgi的Command来启动，它运行django.core.servers.fastcgi中的runfastcgi，runfastcgi使用了flup的WSGIServer来启动fastcgi。而WSGIServer中携带了django.core.handlers.wsgi的WSGIHandler类的一个实例，通过WSGIHandler来处理由Web服务器（Apache、Lighttpd等）传过来的请求，此时才是真正的进入Django的世界。

3、处理Request
当有HTTP请求来时，WSGIHandler就开始工作了，它从BaseHandler继承而来。WSGIHandler为每个请求创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来，接下来就开始创建Response了。

4、创建Response
BaseHandler的get_response方法就是根据request创建response，而具体生成response的动作就是执行urls。py中对象的view函数，这就是django处理“友好URL”的关键步骤，每个这样的函数都要返回一个Response实例，此时一般的做法是通过loader加载template并生成页面内容，其中重要的是通过ORM技术从数据库中取出数据，并渲染Template中，从而生成具体的页面。

5、处理Response
Django返回Response给flup。flup就取出Response的内容返回给Web服务器，由后者返回给浏览器。


Django在fastcgi中主要做了两件事；处理Request和创建Response，而他们对应的核心就是“urls分析”、“模板技术”和“ORM技术”。

